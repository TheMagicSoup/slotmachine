/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package slotto;

import java.util.ArrayList;
import java.io.File;
import java.awt.CardLayout;
/**
 *
 * @author zguledp16
 */
public final class slotMachine extends javax.swing.JFrame {
    /*Integers holding bank (set to a default value), 
    * bet and winnings,
    * and the bet & winnings from the previous spin
    */
    int bank = 4000;
    int bet, winnings = 0;
    //Array of Fruit objects controlling the middle row of slots
    Fruit[] slots;
    //ArrayList acting as a dynamic "RNG pool" Fruit IDs are decided from
    static ArrayList<Integer> reelnumbs = new ArrayList<>();
    //2D array of Fruit objects controlling the 9 slots in the slot machine
    Fruit[][] reels;
    /* Booleans acting as flags for checking & controlling:
    * whether the player can nudge,
    * whether the player can spin
    * and whether a jackpot has been won,
    * alongside an array of Booleans for holding flags controlling the "holding" of each reel
    */
    boolean cannotNudge, canSpin, jackpotFlag = false;
    boolean[] holdFlags = new boolean[3];
    
    //Sound object controlling sound effects
    Sound soundEffects = new Sound();
    //Song object controlling background music
    Song songs = new Song();
    //CardLayout controlling the graphical user interface's card layout
    CardLayout cardLayout;

    /**
     * Creates new form slotMachine
     */
    public slotMachine() {
        // Initialises slots[] and reels[][]
        this.slots = new Fruit[3];
        this.reels = new Fruit[3][3];
        // Initialises graphical user interface elements
        initComponents();
        // Initialises balanceLabel
        outputBalance();
        // Initialises card layout
        cardLayout = (CardLayout) (panelCards.getLayout());
        //Initialises song list
        checkFileList();
        //Initialises random number generation
        initRNG();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        panelCards = new javax.swing.JPanel();
        slotsPanel = new javax.swing.JPanel();
        nudgeDown1 = new javax.swing.JButton();
        nudgeDown2 = new javax.swing.JButton();
        nudgeDown3 = new javax.swing.JButton();
        slotImgPanel = new javax.swing.JPanel();
        topleftslot = new javax.swing.JLabel();
        topmiddleslot = new javax.swing.JLabel();
        toprightslot = new javax.swing.JLabel();
        middleleftslot = new javax.swing.JLabel();
        trueneutralslot = new javax.swing.JLabel();
        middlerightslot = new javax.swing.JLabel();
        bottomleftslot = new javax.swing.JLabel();
        bottommiddleslot = new javax.swing.JLabel();
        bottomrightslot = new javax.swing.JLabel();
        betPanel = new javax.swing.JPanel();
        outputBox = new javax.swing.JLabel();
        clearEntry = new javax.swing.JButton();
        betTen = new javax.swing.JButton();
        betHundred = new javax.swing.JButton();
        betThousand = new javax.swing.JButton();
        betFifty = new javax.swing.JButton();
        betMax = new javax.swing.JButton();
        spinButton = new javax.swing.JButton();
        betTitle = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        winningsLabel = new javax.swing.JLabel();
        jackpotTestButton = new javax.swing.JButton();
        betSpinner = new javax.swing.JSpinner();
        hold1 = new javax.swing.JButton();
        hold2 = new javax.swing.JButton();
        hold3 = new javax.swing.JButton();
        nudgeUp1 = new javax.swing.JButton();
        nudgeUp2 = new javax.swing.JButton();
        nudgeUp3 = new javax.swing.JButton();
        musicPanel = new javax.swing.JPanel();
        songsComboBox = new javax.swing.JComboBox<>();
        scanFolderButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        buttonsPanel = new javax.swing.JPanel();
        slotsPanelButton = new javax.swing.JButton();
        payTablePanelButton = new javax.swing.JButton();
        musicPanelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelCards.setLayout(new java.awt.CardLayout());

        slotsPanel.setBackground(new java.awt.Color(0, 184, 214));
        slotsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        slotsPanel.setRequestFocusEnabled(false);

        nudgeDown1.setBackground(new java.awt.Color(252, 118, 106));
        nudgeDown1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudgeDown.png"))); // NOI18N
        nudgeDown1.setBorderPainted(false);
        nudgeDown1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nudgeDown1ActionPerformed(evt);
            }
        });

        nudgeDown2.setBackground(new java.awt.Color(252, 118, 106));
        nudgeDown2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudgeDown.png"))); // NOI18N
        nudgeDown2.setBorderPainted(false);
        nudgeDown2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nudgeDown2ActionPerformed(evt);
            }
        });

        nudgeDown3.setBackground(new java.awt.Color(252, 118, 106));
        nudgeDown3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudgeDown.png"))); // NOI18N
        nudgeDown3.setBorderPainted(false);
        nudgeDown3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nudgeDown3ActionPerformed(evt);
            }
        });

        slotImgPanel.setBackground(new java.awt.Color(0, 0, 0));
        slotImgPanel.setPreferredSize(new java.awt.Dimension(972, 544));

        topleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        topleftslot.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        topmiddleslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        topmiddleslot.setToolTipText("");
        topmiddleslot.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        toprightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        toprightslot.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        middleleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N

        trueneutralslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N

        middlerightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N

        bottomleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        bottomleftslot.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        bottommiddleslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        bottommiddleslot.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        bottomrightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        bottomrightslot.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout slotImgPanelLayout = new javax.swing.GroupLayout(slotImgPanel);
        slotImgPanel.setLayout(slotImgPanelLayout);
        slotImgPanelLayout.setHorizontalGroup(
            slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slotImgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slotImgPanelLayout.createSequentialGroup()
                        .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(middleleftslot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(topleftslot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(slotImgPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(topmiddleslot, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(slotImgPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(trueneutralslot, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(slotImgPanelLayout.createSequentialGroup()
                        .addComponent(bottomleftslot, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bottommiddleslot, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(toprightslot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(middlerightslot, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bottomrightslot, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        slotImgPanelLayout.setVerticalGroup(
            slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slotImgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(topleftslot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(topmiddleslot, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toprightslot, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trueneutralslot)
                    .addComponent(middlerightslot, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(middleleftslot, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bottomrightslot, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(bottomleftslot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(bottommiddleslot, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        betPanel.setBackground(new java.awt.Color(0, 184, 214));

        outputBox.setText("Enter a bet to get started.");

        clearEntry.setBackground(new java.awt.Color(252, 118, 106));
        clearEntry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/clearentry.png"))); // NOI18N
        clearEntry.setBorderPainted(false);
        clearEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEntryActionPerformed(evt);
            }
        });

        betTen.setBackground(new java.awt.Color(252, 118, 106));
        betTen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/betten.png"))); // NOI18N
        betTen.setBorderPainted(false);
        betTen.setMaximumSize(new java.awt.Dimension(100, 100));
        betTen.setMinimumSize(new java.awt.Dimension(100, 100));
        betTen.setPreferredSize(new java.awt.Dimension(100, 100));
        betTen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betTenActionPerformed(evt);
            }
        });

        betHundred.setBackground(new java.awt.Color(252, 118, 106));
        betHundred.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bethundred.png"))); // NOI18N
        betHundred.setBorderPainted(false);
        betHundred.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betHundredActionPerformed(evt);
            }
        });

        betThousand.setBackground(new java.awt.Color(252, 118, 106));
        betThousand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/betthousand.png"))); // NOI18N
        betThousand.setBorder(null);
        betThousand.setBorderPainted(false);
        betThousand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betThousandActionPerformed(evt);
            }
        });

        betFifty.setBackground(new java.awt.Color(252, 118, 106));
        betFifty.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/betfifty.png"))); // NOI18N
        betFifty.setBorder(null);
        betFifty.setBorderPainted(false);
        betFifty.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        betFifty.setRolloverEnabled(false);
        betFifty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betFiftyActionPerformed(evt);
            }
        });

        betMax.setBackground(new java.awt.Color(252, 118, 106));
        betMax.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/betmax.png"))); // NOI18N
        betMax.setBorderPainted(false);
        betMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betMaxActionPerformed(evt);
            }
        });

        spinButton.setBackground(new java.awt.Color(237, 32, 36));
        spinButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/spin.png"))); // NOI18N
        spinButton.setBorderPainted(false);
        spinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinButtonActionPerformed(evt);
            }
        });

        betTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        betTitle.setText("Bet: £");

        balanceLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        balanceLabel.setText("Balance:");

        winningsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        winningsLabel.setText("Winnings:");

        jackpotTestButton.setText("jButton14");
        jackpotTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jackpotTestButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout betPanelLayout = new javax.swing.GroupLayout(betPanel);
        betPanel.setLayout(betPanelLayout);
        betPanelLayout.setHorizontalGroup(
            betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(betPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(betMax, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(betPanelLayout.createSequentialGroup()
                                .addComponent(betTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(betHundred, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(betPanelLayout.createSequentialGroup()
                                .addComponent(betFifty, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(betThousand, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(spinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(outputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(betTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(betSpinner)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, betPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, betPanelLayout.createSequentialGroup()
                                .addComponent(jackpotTestButton)
                                .addGap(195, 195, 195))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, betPanelLayout.createSequentialGroup()
                                .addComponent(balanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(winningsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        betPanelLayout.setVerticalGroup(
            betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(betPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(outputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addComponent(jackpotTestButton)
                        .addGap(28, 28, 28)
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(betSpinner)
                            .addComponent(betTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(balanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(winningsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addComponent(clearEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(betMax, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(betTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(betHundred, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(betFifty, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(betThousand, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(spinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hold1.setBackground(new java.awt.Color(252, 118, 106));
        hold1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/hold.png"))); // NOI18N
        hold1.setBorderPainted(false);
        hold1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hold1ActionPerformed(evt);
            }
        });

        hold2.setBackground(new java.awt.Color(252, 118, 106));
        hold2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/hold.png"))); // NOI18N
        hold2.setBorderPainted(false);
        hold2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hold2ActionPerformed(evt);
            }
        });

        hold3.setBackground(new java.awt.Color(252, 118, 106));
        hold3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/hold.png"))); // NOI18N
        hold3.setBorderPainted(false);
        hold3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hold3ActionPerformed(evt);
            }
        });

        nudgeUp1.setBackground(new java.awt.Color(252, 118, 106));
        nudgeUp1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudgeUp.png"))); // NOI18N
        nudgeUp1.setBorderPainted(false);
        nudgeUp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nudgeUp1ActionPerformed(evt);
            }
        });

        nudgeUp2.setBackground(new java.awt.Color(252, 118, 106));
        nudgeUp2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudgeUp.png"))); // NOI18N
        nudgeUp2.setBorderPainted(false);
        nudgeUp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nudgeUp2ActionPerformed(evt);
            }
        });

        nudgeUp3.setBackground(new java.awt.Color(252, 118, 106));
        nudgeUp3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudgeUp.png"))); // NOI18N
        nudgeUp3.setBorderPainted(false);
        nudgeUp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nudgeUp3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout slotsPanelLayout = new javax.swing.GroupLayout(slotsPanel);
        slotsPanel.setLayout(slotsPanelLayout);
        slotsPanelLayout.setHorizontalGroup(
            slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slotsPanelLayout.createSequentialGroup()
                .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slotsPanelLayout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(slotImgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(slotsPanelLayout.createSequentialGroup()
                                .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(slotsPanelLayout.createSequentialGroup()
                                        .addComponent(nudgeDown1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(nudgeUp1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(hold1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(slotsPanelLayout.createSequentialGroup()
                                        .addComponent(nudgeDown2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(nudgeUp2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(hold2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(slotsPanelLayout.createSequentialGroup()
                                        .addComponent(nudgeDown3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(nudgeUp3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(hold3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 114, Short.MAX_VALUE))
                    .addGroup(slotsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(betPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        slotsPanelLayout.setVerticalGroup(
            slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slotsPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(slotImgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(nudgeDown3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(nudgeUp2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(nudgeDown2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(nudgeUp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(nudgeDown1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nudgeUp3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hold1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hold2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hold3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(betPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        panelCards.add(slotsPanel, "slotsCard");

        musicPanel.setBackground(new java.awt.Color(0, 184, 214));
        musicPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        songsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        songsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default" }));
        songsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songsComboBoxActionPerformed(evt);
            }
        });

        scanFolderButton.setText("Scan for songs");
        scanFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanFolderButtonActionPerformed(evt);
            }
        });

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/pause.png"))); // NOI18N
        pauseButton.setBorderPainted(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/play.png"))); // NOI18N
        playButton.setBorderPainted(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/stop.png"))); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout musicPanelLayout = new javax.swing.GroupLayout(musicPanel);
        musicPanel.setLayout(musicPanelLayout);
        musicPanelLayout.setHorizontalGroup(
            musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, musicPanelLayout.createSequentialGroup()
                .addContainerGap(329, Short.MAX_VALUE)
                .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(musicPanelLayout.createSequentialGroup()
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(364, 364, 364))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, musicPanelLayout.createSequentialGroup()
                        .addComponent(songsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scanFolderButton)
                        .addGap(358, 358, 358))))
        );
        musicPanelLayout.setVerticalGroup(
            musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(musicPanelLayout.createSequentialGroup()
                .addGap(365, 365, 365)
                .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(songsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scanFolderButton))
                .addGap(104, 104, 104)
                .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(404, Short.MAX_VALUE))
        );

        panelCards.add(musicPanel, "musicCard");

        splitPane.setRightComponent(panelCards);

        buttonsPanel.setBackground(new java.awt.Color(232, 175, 54));
        buttonsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        slotsPanelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/slotButtonImg.png"))); // NOI18N
        slotsPanelButton.setBorderPainted(false);
        slotsPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slotsPanelButtonActionPerformed(evt);
            }
        });

        payTablePanelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/payTableButtonImg.gif"))); // NOI18N
        payTablePanelButton.setBorderPainted(false);
        payTablePanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payTablePanelButtonActionPerformed(evt);
            }
        });

        musicPanelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/musicButtonImg.png"))); // NOI18N
        musicPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicPanelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(musicPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(slotsPanelButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payTablePanelButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addGap(257, 257, 257)
                .addComponent(slotsPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(payTablePanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(musicPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(255, 255, 255))
        );

        splitPane.setLeftComponent(buttonsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(splitPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(splitPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Graphics setting code">
    private void setSlotGraphics() {
        // Setting correct picture for each symbol
        topleftslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[0][0].getName() + ".png")));
        middleleftslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + slots[0].getName() + "spec.png")));
        bottomleftslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[0][2].getName() + ".png")));
        topmiddleslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[1][0].getName() + ".png")));
        trueneutralslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + slots[1].getName() + "spec.png")));
        bottommiddleslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[1][2].getName() + ".png")));
        toprightslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[2][0].getName() + ".png")));
        middlerightslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + slots[2].getName() + "spec.png")));
        bottomrightslot.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[2][2].getName() + ".png")));
    }

    private void setFailGraphics() {
        // Outputs fail message
        outputBox.setText("You're BROKE!");
        // Sets fail graphic for each slot
        middleleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        trueneutralslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        middlerightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        topleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        topmiddleslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        toprightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        bottomleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        bottommiddleslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        bottomrightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
    }

    private void setNudgeFailGraphics() {
        // Makes nudge buttons darker to indicate that they can't be used yet
        nudgeDown1.setBackground(new java.awt.Color(158, 12, 0));
        nudgeDown2.setBackground(new java.awt.Color(158, 12, 0));
        nudgeDown3.setBackground(new java.awt.Color(158, 12, 0));
        nudgeUp1.setBackground(new java.awt.Color(158,12,0));
        nudgeUp2.setBackground(new java.awt.Color(158,12,0));
        nudgeUp3.setBackground(new java.awt.Color(158,12,0));
        // Outputs message for failing to nudge
        outputBox.setText("You can't nudge again until you spin!");
    }

    private void setHoldFailGraphics() {
        // Makes hold buttons darker to indicate that they can't be used yet
        hold1.setBackground(new java.awt.Color(158, 12, 0));
        hold2.setBackground(new java.awt.Color(158, 12, 0));
        hold3.setBackground(new java.awt.Color(158, 12, 0));
        // Outputs message for failing to hold
        outputBox.setText("You can't hold another reel until you spin!");
    }

    private void resetNudgeGraphics() {
        // Resets nudge buttons to original colour to indicate that they can be used again
        nudgeDown1.setBackground(new java.awt.Color(252, 118, 106));
        nudgeDown2.setBackground(new java.awt.Color(252, 118, 106));
        nudgeDown3.setBackground(new java.awt.Color(252, 118, 106));
        nudgeUp1.setBackground(new java.awt.Color(252, 118, 106));
        nudgeUp2.setBackground(new java.awt.Color(252, 118, 106));
        nudgeUp3.setBackground(new java.awt.Color(252, 118, 106));
    }

    private void resetHoldGraphics() {
        // Resets hold buttons to original colour to indicate that they can be used again
        hold1.setBackground(new java.awt.Color(252, 118, 106));
        hold2.setBackground(new java.awt.Color(252, 118, 106));
        hold3.setBackground(new java.awt.Color(252, 118, 106));
    }

    private void setErrGraphics() {
        // Sets error graphic to middle row of slots
        middleleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/ERR.png")));
        trueneutralslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/ERR.png")));
        middlerightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/ERR.png")));
        // Makes spin button darker to indicate that it can't be used yet
        spinButton.setBackground(new java.awt.Color(141, 19, 21));
    }

    private void setWinGraphics() {
        // Changes GUI background to gold
        spinButton.setBackground(new java.awt.Color(163, 16, 7));
        // Sets each slot to jackpot graphic
        middleleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        trueneutralslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        middlerightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        topleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        topmiddleslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        toprightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        bottomleftslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        bottommiddleslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        bottomrightslot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        // Changes background colour of panel holding slots
        slotsPanel.setBackground(new java.awt.Color(255, 204, 102));
        // Changes background colour of panel holding buttons
        betPanel.setBackground(new java.awt.Color(255, 204, 102));
        // Plays jackpot audio
        soundEffects.playAudio("jackpotsong");
        // Outputs victory message
        outputBox.setText("YOU ARE A WINNER! NOW GET OUT!");
    }

    // </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="RNG manipulation code">
    // Arraylist initialisation
    public void initRNG() {
        // For each potential ID
        for (int i = 0; i < 8; i++) {
            // To implement each ID 10 times
            for (int j = 0; j < 10; j++) {
                // If current ID is 0 (for cherry) or 7 (for skull)
                if (i == 0 || i == 7) {
                    // Puts half as many 0s and 7s in reelnumbs
                    if (j % 2 == 0) {
                        reelnumbs.add(i);
                    }
                } else {
                    //Adds current ID to reelnumbs
                    reelnumbs.add(i);
                }
            }
        }
        //Adds ID 8 once
        reelnumbs.add(8);
        //Adds ID 9 once
        reelnumbs.add(9);
    }

    public void raiseChances(int val) {
        while(val>0&&reelnumbs.contains(0)&&reelnumbs.contains(7)){
            reelnumbs.remove(reelnumbs.indexOf(0));
            reelnumbs.add(7);
        }
    }

    public void tankChances(int val) {
        while(val>0&&reelnumbs.contains(0)&&reelnumbs.contains(7)){
            reelnumbs.remove(reelnumbs.indexOf(0));
            reelnumbs.add(7);
        }
    }
    
    public void checkChances(){
        //If player balance is under £500, perform raiseChances()
        if(bank<300){
            raiseChances(3);
        }
        //If player balance is over £2500, perform tankChances()
        if (bank>2500){
            tankChances(3);
        }
    }

    //</editor-fold>
    
    public void checkFileList() {
        //New array of song names, holds all files in src/slotto/sounds/music
        File songsFolder = new File("src\\slotto\\sounds\\music");
        //Creates array of song files, filters to only include files ending in .wav
        String[] songList = songsFolder.list((dir, name) -> name.endsWith(".wav"));
        //For every element in array, omit file extension
        for (int i = 0; i < songList.length; i++) {
            songList[i] = songList[i].substring(0, songList[i].indexOf("."));
        }
        //Sets list of Strings used in combo box as songList
        songsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(songList));
    }
    
    //<editor-fold defaultstate="collapsed" desc="Chief algorithms">
    private void winningsCalc(int multiplier) {
        // Multiplies bet with multiplier and adds to bank
        // Handles negative winnings with negative multipliers
        bank += bet*multiplier;
        // Stores results of calculatons in winnings value
        winnings += bet;
        // Outputs bank value and winnings
        outputBalance();
        outputWinnings();
    }
    
    //<editor-fold defaultstate="collapsed" desc="Code for outputting various values">
    private void outputBalance(){
        balanceLabel.setText("Balance: £"+bank);
    }
    
    private void outputWinnings(){
        winningsLabel.setText("Winnings: £"+winnings);
    }
    //</editor-fold>
    
    private void checkSlots() {
        // Resets hold flags & hold button graphics
        for(int i=0;i<3;i++){
            holdFlags[i]=false;
        }
        cannotNudge=false;
        resetHoldGraphics();
        // Reset nudge graphics
        resetNudgeGraphics();
        // Reset output box
        outputBox.setText("");
        // Triggered when all 3 slots are the same
        if (slots[0].getID() == slots[1].getID() && slots[1].getID() == slots[2].getID()) {
            switch (slots[0].getID()) {
                case 0:
                    // If all slots are cherries, multiply wager by 10 & add as winnings
                    winningsCalc(10);
                    break;
                case 1:
                    // If all slots are bells, multiply wager by 10 & add as winnings
                    winningsCalc(10);
                    break;
                case 2:
                    // If all slots are BARs, multiply wager by 20 & add as winnings
                    winningsCalc(20);
                    break;
                case 3:
                    // If all slots are sevens, multiply wager by 30 & add as winnings
                    winningsCalc(30);
                    break;
                case 4:
                    // If all slots are lemons, multiply wager by 40 & add as winnings
                    winningsCalc(30);
                    break;
                case 5:
                    // If all slots are grapes , multiply wager by 60 & add as winnings
                    winningsCalc(60);
                    break;
                case 6:
                    // If all slots are oranges, multiply wager by 100 & add as winnings
                    winningsCalc(100);
                    break;
                case 7:
                    // If all slots are skulls, multiply wager by 10 & deduct
                    winningsCalc(-10);
                    break;
                case 8:
                    // If all slots are WIN symbols, multiply wager by 10,000
                    winningsCalc(10000);
                    jackpotFlag = true;
                    canSpin = false;
                    cannotNudge = true;
                    outputBox.setText("JACKPOT!");
                    setWinGraphics();
                    break;
                case 9:
                    // If all slots are Dragon Balls, multiply wager by 400 & add to winnings
                    winningsCalc(400);
                    break;
            }
        } else {
            // Booleans for checking if cherries & skulls are present respectively
            boolean cherryPresent, skullPresent, justSkullOrCherry;
            cherryPresent = skullPresent = false;
            // Reset integer for presence of cherry and/or skull
            int checkInt = 0;
            // For loop that checks for cherries & skulls
            for (int i = 0; i < 3; i++) {
                // If current slot is cherry, set following calculations for cherry
                if (slots[i].getID() == 0) {
                    cherryPresent = true;
                    System.out.println("CHERRDETECT");
                    checkInt = 0;
                }
                // If current slot is skull, set following calculations for skull
                if (slots[i].getID() == 7) {
                    skullPresent = true;
                    System.out.println("SKULL DETECT");
                    checkInt = 7;
                }
            }
            // Set skull^cherry flag
            justSkullOrCherry = cherryPresent ^ skullPresent;
            // If only a skull or only a cherry is present, the following calculations can be performed
            if (justSkullOrCherry) {
                // If 2 of the slots match, distribute winnings depending on what
                if (((slots[0].getID() == slots[1].getID() || slots[0].getID() == slots[2].getID())
                        && slots[0].getID() == checkInt)
                        || ((slots[1].getID() == slots[2].getID()) && slots[1].getID() == checkInt)) {
                    switch (checkInt) {
                        case 0:
                            // If 2 slots are cherries, multiply wager by 5 and add to winnings
                            winningsCalc(5);
                            break;
                        case 7:
                            // If 2 slots are skulls, deduct wager*5 from bank
                            winningsCalc(-5);
                            break;
                    }
                } else {
                    switch (checkInt) {
                        // If 1 slot is a cherry, add wager*2 to bank
                        case 0:
                            winningsCalc(2);
                            break;
                        // If 1 slot is a skull, deduct wager*2 from bank
                        case 7:
                            winningsCalc(-2);
                            break;
                    }
                }
            } else {
                // If none of the symbols match and aren't skull/cherry, deduct wager from bank
                System.out.println("SUCCESSFUL BET LOSS");
                winningsCalc(-1);
                System.out.println(bank);
            }

        }
        // If bank becomes empty, output fail graphics
        if (bank <= 0) {
            setFailGraphics();
            canSpin=false;
        }

    }

    private void placeBet() {
        // Trace message for whenever placeBet() is executed
        System.out.println("placeBet() went through");
        // Storing inputted bet in its own variable for validation
        int x = (Integer) betSpinner.getValue();
        if(x<1){
            //For if the input is less than/equal to 0
            outputBox.setText("Your bet is too low! You have to bet at least 1.");
        } else if(x>bank){
            //For if the input is greater than what's in the player's balance
            outputBox.setText("You can't wager more money than what's in your balance!");
        } else if(jackpotFlag){
            //For if the player has already won a jackpot
            outputBox.setText("YOU ALREADY WON, STOP SPINNING!");
        } else {
            //Make bet equal to what's in the spinner box
            bet=x;
            //Set canSpin to true
            canSpin=true;
            //Trace statements
            System.out.println("BANK IS "+bank);
            System.out.println("X IS "+x);
            System.out.println("BET IS "+bet);
        }
    }

    private void nudge(Fruit[] slotsToMove, boolean isUp) {
        // If the cannotNudge flag is true or the canSpin flag is false, the player can't nudge
        if (cannotNudge || !canSpin) {
            //Output nudge failure graphics & failure message
            setNudgeFailGraphics();
            outputBox.setText("You can't nudge until you spin!");
        } else {
            // £10 omitted from bank
            bank -= 10;
            // Trace statement to check for difference between the stored symbols and the outputted graphics
            System.out.println("[" + slotsToMove[0].getName() + ", " + slotsToMove[1].getName() + ", " + slotsToMove[2].getName() + "]");
            // Performed if isUp is true, and the reel is being nudged up
            if(isUp) {
                //Replacing top slot with middle slot
                slotsToMove[0].replaceWith(slotsToMove[1]);
                //Replacing middle slot with bottom slot
                slotsToMove[1].replaceWith(slotsToMove[2]);
                //Creating new bottom slot
                slotsToMove[2].spinner(reelnumbs);
            } else {
                // Replacing bottom slot with middle slot
                slotsToMove[2].replaceWith(slotsToMove[1]);
                // Replacing middle slot with top slot
                slotsToMove[1].replaceWith(slotsToMove[0]);
                // Creating new top slot
                slotsToMove[0].spinner(reelnumbs);
            }
            // Setting graphics for the symbols again
            setSlotGraphics();
            // Recalculating the winnings based on the new set of slots
            checkSlots();
            // Sets cannotNudge flag to true
            cannotNudge = true;
            // Output bank value
            outputBalance();
            // Plays nudge button sound effect
            soundEffects.playAudio("nudgebuttonpress");
        }
    }

    // Procedure handling regenerating slots each spin
    private void spinSlots() {
        // For each symbol, reset the object's contents & regenerate ID and name
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                //If the hold flag for this reel is true, skip the following
                if (!holdFlags[i]) {
                    reels[i][j] = new Fruit("", 0);
                    reels[i][j].spinner(reelnumbs);
                }
            }
        }
    }
    //</editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Procedures for bet and hold buttons"> 
    private void betButtonAct(int val) {
        //Defining integer x
        int x;
        //Storing value in spinner in spinVal
        int spinnerVal=(Integer)betSpinner.getValue();
        if((val+spinnerVal)>bank){
        //If parameter+what's already in the spinner exceed bank value, x=bank
            x=bank;
        } else if(val==0){
        //If parameter is 0, x=0
            x=0;
        } else {
        //Otherwise, x=parameter+what's in the spinner
            x=val+spinnerVal;
        }
        //Set value to x
        betSpinner.setValue(x);
        //Play bet button sound effect
        soundEffects.playAudio("betbuttonpress");
    }

    private void holdButtonAct(int index) {
        //Remove £10 from player balance
        bank -= 10;
        //Change balance label text to reflect this
        outputBalance();
        //Set hold flag for inputted reel as true
        holdFlags[index] = true;
        //Play hold button sound effect
        soundEffects.playAudio("holdbuttonpress");
    }
    // </editor-fold>

    private void spinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinButtonActionPerformed
        // Perform placeBet(), validate bet & store it
        placeBet();
        // If spin flag is true, perform rest of method
        if (canSpin) {
            // Trace statement for if this action successfully goes through
            System.out.println("action triggered");
            // Performs spinSlots()
            spinSlots();
            //Stores middle slot in each column in their own array for comparison in checkSlots()
            for(int i=0;i<3;i++){
                slots[i]=reels[i][1];
            }
            // Sets slot graphics
            setSlotGraphics();
            // Checks slots & handles payouts
            checkSlots();
            // Alters reelnumbs if necessary
            checkChances();
        } else {
            // If player cannot spin, set error graphics
            setErrGraphics();
        }
    }//GEN-LAST:event_spinButtonActionPerformed

    // <editor-fold defaultstate="collapsed" desc="Code for nudge buttons">
    private void nudgeDown1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nudgeDown1ActionPerformed
        //Nudges bottom and middle slots in 1st reel downwards once, generates new symbol for top slot
        nudge(reels[0],false);
    }//GEN-LAST:event_nudgeDown1ActionPerformed

    private void nudgeDown2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nudgeDown2ActionPerformed
        //Nudges bottom and middle slots in 2nd reel downwards once, generates new symbol for top slot
        nudge(reels[1],false);
    }//GEN-LAST:event_nudgeDown2ActionPerformed

    private void nudgeDown3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nudgeDown3ActionPerformed
        //Nudges bottom and middle slots in 3rd reel downwards once, generates new symbol for top slot
        nudge(reels[2],false);
    }//GEN-LAST:event_nudgeDown3ActionPerformed
	
    private void nudgeUp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nudgeUp1ActionPerformed
        nudge(reels[0],true);
    }//GEN-LAST:event_nudgeUp1ActionPerformed

    private void nudgeUp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nudgeUp2ActionPerformed
        nudge(reels[1],true);
    }//GEN-LAST:event_nudgeUp2ActionPerformed

    private void nudgeUp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nudgeUp3ActionPerformed
        nudge(reels[2],true);
    }//GEN-LAST:event_nudgeUp3ActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Code for bet buttons">
    private void betMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betMaxActionPerformed
        //Sets held value in spinner as the same as bank
        betButtonAct(bank);
    }//GEN-LAST:event_betMaxActionPerformed

    private void betHundredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betHundredActionPerformed
        //Increases held value in spinner by 100
        betButtonAct(100);
    }//GEN-LAST:event_betHundredActionPerformed

    private void betFiftyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betFiftyActionPerformed
        //Increases held value in spinner by 50
        betButtonAct(50);
    }//GEN-LAST:event_betFiftyActionPerformed

    private void betThousandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betThousandActionPerformed
        //Increases held value in spinner by 1000
        betButtonAct(1000);
    }//GEN-LAST:event_betThousandActionPerformed

    private void clearEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEntryActionPerformed
        //Sets held value in spinner as 0
        betButtonAct(0);
    }//GEN-LAST:event_clearEntryActionPerformed

    private void betTenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betTenActionPerformed
        //Increases held value in spinner by 10
        betButtonAct(10);
    }//GEN-LAST:event_betTenActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Code for hold buttons">
    private void hold1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hold1ActionPerformed
        // If hold flag for this reel is already true, or the player can't spin, output fail graphics
        if (holdFlags[0] || !canSpin) {
            setHoldFailGraphics();
        } else {
            //Otherwise, perform holdButtonAct() on this reel's index
            holdButtonAct(0);
        }
    }//GEN-LAST:event_hold1ActionPerformed

    private void hold2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hold2ActionPerformed
        // If hold flag for this reel is already true, or the player can't spin, output fail graphics
        if (holdFlags[1] || !canSpin) {
            setHoldFailGraphics();
        } else {
            //Otherwise, perform holdButtonAct() on this reel's index
            holdButtonAct(1);
        }
    }//GEN-LAST:event_hold2ActionPerformed

    private void hold3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hold3ActionPerformed
        // If hold flag for this reel is already true, or the player can't spin, output fail graphics
        if (holdFlags[2] || !canSpin) {
            setHoldFailGraphics();
        } else {
            //Otherwise, perform holdButtonAct() on this reel's index
            holdButtonAct(2);
        }
    }//GEN-LAST:event_hold3ActionPerformed

    // </editor-fold>
    
    // Button for auto-triggering jackpots, must omit once complete
    private void jackpotTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jackpotTestButtonActionPerformed
        //Wipes reelnumbs & makes 8 the only value, guaranteeing it's chosen for each slot
        reelnumbs.clear();
        reelnumbs.add(8);
    }//GEN-LAST:event_jackpotTestButtonActionPerformed

    // <editor-fold defaultstate="collapsed" desc="Code for side panel buttons">
    private void slotsPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slotsPanelButtonActionPerformed
        //Shows slot machine jPanel
        cardLayout.show(panelCards, "slotsCard");
    }//GEN-LAST:event_slotsPanelButtonActionPerformed

    private void payTablePanelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        //Opens new jFrame with pay table in it
        new payTable().setVisible(true);
    }                                                   

    private void musicPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicPanelButtonActionPerformed
        //Shows music control jPanel
        cardLayout.show(panelCards, "musicCard");
    }//GEN-LAST:event_musicPanelButtonActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Code for music buttons">
    private void songsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songsComboBoxActionPerformed
        songs.select(""+songsComboBox.getSelectedItem());
    }//GEN-LAST:event_songsComboBoxActionPerformed

    private void scanFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanFolderButtonActionPerformed
        //Scans music folder to reflect new changes if they're made mid-session
        checkFileList();
    }//GEN-LAST:event_scanFolderButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        //Pauses current song
        songs.pause();
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        //Plays current song
        songs.play();
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        //Stops current song
        songs.stop();
    }//GEN-LAST:event_stopButtonActionPerformed
    // </editor-fold>
    // HI

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(slotMachine.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(slotMachine.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(slotMachine.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(slotMachine.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new slotMachine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JButton betFifty;
    private javax.swing.JButton betHundred;
    private javax.swing.JButton betMax;
    private javax.swing.JPanel betPanel;
    private javax.swing.JSpinner betSpinner;
    private javax.swing.JButton betTen;
    private javax.swing.JButton betThousand;
    private javax.swing.JLabel betTitle;
    private javax.swing.JLabel bottomleftslot;
    private javax.swing.JLabel bottommiddleslot;
    private javax.swing.JLabel bottomrightslot;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton clearEntry;
    private javax.swing.JButton hold1;
    private javax.swing.JButton hold2;
    private javax.swing.JButton hold3;
    private javax.swing.JButton jackpotTestButton;
    private javax.swing.JLabel middleleftslot;
    private javax.swing.JLabel middlerightslot;
    private javax.swing.JPanel musicPanel;
    private javax.swing.JButton musicPanelButton;
    private javax.swing.JButton nudgeDown1;
    private javax.swing.JButton nudgeDown2;
    private javax.swing.JButton nudgeDown3;
    private javax.swing.JButton nudgeUp1;
    private javax.swing.JButton nudgeUp2;
    private javax.swing.JButton nudgeUp3;
    private javax.swing.JLabel outputBox;
    private javax.swing.JPanel panelCards;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton payTablePanelButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton scanFolderButton;
    private javax.swing.JPanel slotImgPanel;
    private javax.swing.JPanel slotsPanel;
    private javax.swing.JButton slotsPanelButton;
    private javax.swing.JComboBox<String> songsComboBox;
    private javax.swing.JButton spinButton;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel topleftslot;
    private javax.swing.JLabel topmiddleslot;
    private javax.swing.JLabel toprightslot;
    private javax.swing.JLabel trueneutralslot;
    private javax.swing.JLabel winningsLabel;
    // End of variables declaration//GEN-END:variables
}
