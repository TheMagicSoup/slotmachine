/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package slotto;

import java.util.*;
import java.io.File;
import javax.sound.sampled.*;
import java.awt.CardLayout;
import java.io.FilenameFilter;

/**
 *
 * @author zguledp16
 */
public class slotMachine extends javax.swing.JFrame {
    /*
    Creating vars for bank, bet, middle row first column slot, middle row second column slot, middle row third column slot
    reel symbol pool for rng, flag enabling/disabling nudging, 2D array as table for generated symbols, most recent winnings,
    flag enabling/disabling spinning, checking if only a skull or cherry are present, flag for holding each row
    */
    int bank = 4000;
    int bet = 0;
    int winnings=0;
    Fruit[] slots;
    static ArrayList<Integer> reelnumbs = new ArrayList<>();

    Fruit[][] reels;
    int prevBank;
    int prevBet;
    int recentWinnings;
    
    boolean cannotNudge = false;
    boolean canSpin=false;
    boolean justSkullOrCherry=false;
    boolean[] holdFlags=new boolean[3];
    boolean jackpotFlag=false;
    boolean soundCurrentlyPlaying=false;
    boolean songCurrentlyPlaying=false;
    
    AudioInputStream soundStream;
    Clip soundClip;
    AudioInputStream songStream;
    Clip songClip;
    CardLayout cardLayout;
    /**
     * Creates new form slotMachine
     */
    public slotMachine() {
        //initialises bank jLabel, slots[] and reels[][]
        this.slots=new Fruit[3];
        this.reels = new Fruit[3][3];
        initComponents();
        jLabel6.setText("Â£" + bank);
        cardLayout = (CardLayout) (panelCards.getLayout());
        checkFileList();
        initClips();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        panelCards = new javax.swing.JPanel();
        slotsPanel = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        slotImgPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        betPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        payTablePanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        musicPanel = new javax.swing.JPanel();
        songsComboBox = new javax.swing.JComboBox<>();
        scanFolderButton = new javax.swing.JButton();
        enterSongButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        buttonsPanel = new javax.swing.JPanel();
        slotsPanelButton = new javax.swing.JButton();
        payTablePanelButton = new javax.swing.JButton();
        musicPanelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelCards.setLayout(new java.awt.CardLayout());

        slotsPanel.setBackground(new java.awt.Color(0, 184, 214));
        slotsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        slotsPanel.setRequestFocusEnabled(false);

        jButton2.setBackground(new java.awt.Color(252, 118, 106));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudge.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(252, 118, 106));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudge.png"))); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(252, 118, 106));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/nudge.png"))); // NOI18N
        jButton4.setBorderPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        slotImgPanel.setBackground(new java.awt.Color(0, 0, 0));
        slotImgPanel.setPreferredSize(new java.awt.Dimension(972, 544));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        jLabel9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        jLabel10.setToolTipText("");
        jLabel10.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        jLabel11.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        jLabel13.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/default.gif"))); // NOI18N
        jLabel14.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout slotImgPanelLayout = new javax.swing.GroupLayout(slotImgPanel);
        slotImgPanel.setLayout(slotImgPanelLayout);
        slotImgPanelLayout.setHorizontalGroup(
            slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slotImgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slotImgPanelLayout.createSequentialGroup()
                        .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(slotImgPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(slotImgPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(slotImgPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        slotImgPanelLayout.setVerticalGroup(
            slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slotImgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(slotImgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        betPanel.setBackground(new java.awt.Color(0, 184, 214));

        jLabel8.setText("Enter a bet to get started.");

        jButton9.setBackground(new java.awt.Color(252, 118, 106));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/clearentry.png"))); // NOI18N
        jButton9.setBorderPainted(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(252, 118, 106));
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/betten.png"))); // NOI18N
        jButton12.setBorderPainted(false);
        jButton12.setMaximumSize(new java.awt.Dimension(100, 100));
        jButton12.setMinimumSize(new java.awt.Dimension(100, 100));
        jButton12.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(252, 118, 106));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bethundred.png"))); // NOI18N
        jButton6.setBorderPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(252, 118, 106));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/betthousand.png"))); // NOI18N
        jButton8.setBorder(null);
        jButton8.setBorderPainted(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(252, 118, 106));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/betfifty.png"))); // NOI18N
        jButton7.setBorder(null);
        jButton7.setBorderPainted(false);
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton7.setRolloverEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(252, 118, 106));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/betmax.png"))); // NOI18N
        jButton5.setBorderPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(237, 32, 36));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/spin.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Bet: Â£");

        jSpinner1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel());
        jSpinner1.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Balance:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("-");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Winnings:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("-");

        jButton14.setText("jButton14");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout betPanelLayout = new javax.swing.GroupLayout(betPanel);
        betPanel.setLayout(betPanelLayout);
        betPanelLayout.setHorizontalGroup(
            betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(betPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(betPanelLayout.createSequentialGroup()
                                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(betPanelLayout.createSequentialGroup()
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, betPanelLayout.createSequentialGroup()
                        .addComponent(jButton14)
                        .addGap(195, 195, 195))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, betPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        betPanelLayout.setVerticalGroup(
            betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(betPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addComponent(jButton14)
                        .addGap(28, 28, 28)
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(betPanelLayout.createSequentialGroup()
                        .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(betPanelLayout.createSequentialGroup()
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(betPanelLayout.createSequentialGroup()
                                .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(betPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jButton10.setBackground(new java.awt.Color(252, 118, 106));
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/hold.png"))); // NOI18N
        jButton10.setBorderPainted(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(252, 118, 106));
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/hold.png"))); // NOI18N
        jButton11.setBorderPainted(false);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(252, 118, 106));
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/hold.png"))); // NOI18N
        jButton13.setBorderPainted(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout slotsPanelLayout = new javax.swing.GroupLayout(slotsPanel);
        slotsPanel.setLayout(slotsPanelLayout);
        slotsPanelLayout.setHorizontalGroup(
            slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slotsPanelLayout.createSequentialGroup()
                .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slotsPanelLayout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slotsPanelLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(slotImgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(73, 73, 73))
            .addComponent(betPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        slotsPanelLayout.setVerticalGroup(
            slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slotsPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(slotImgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(slotsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(betPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        panelCards.add(slotsPanel, "slotsCard");

        payTablePanel.setBackground(new java.awt.Color(0, 184, 214));
        payTablePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        jLabel4.setBackground(new java.awt.Color(0, 184, 214));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/paytable.png"))); // NOI18N

        javax.swing.GroupLayout payTablePanelLayout = new javax.swing.GroupLayout(payTablePanel);
        payTablePanel.setLayout(payTablePanelLayout);
        payTablePanelLayout.setHorizontalGroup(
            payTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE)
        );
        payTablePanelLayout.setVerticalGroup(
            payTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 956, Short.MAX_VALUE)
        );

        panelCards.add(payTablePanel, "payTableCard");

        musicPanel.setBackground(new java.awt.Color(0, 184, 214));
        musicPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        songsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        songsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default" }));
        songsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songsComboBoxActionPerformed(evt);
            }
        });

        scanFolderButton.setText("Scan for songs");
        scanFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanFolderButtonActionPerformed(evt);
            }
        });

        enterSongButton.setText("Choose song");
        enterSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterSongButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/play.png"))); // NOI18N
        playButton.setBorderPainted(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout musicPanelLayout = new javax.swing.GroupLayout(musicPanel);
        musicPanel.setLayout(musicPanelLayout);
        musicPanelLayout.setHorizontalGroup(
            musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, musicPanelLayout.createSequentialGroup()
                .addContainerGap(284, Short.MAX_VALUE)
                .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(musicPanelLayout.createSequentialGroup()
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(enterSongButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, musicPanelLayout.createSequentialGroup()
                        .addComponent(songsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scanFolderButton)))
                .addGap(358, 358, 358))
        );
        musicPanelLayout.setVerticalGroup(
            musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(musicPanelLayout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(songsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scanFolderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enterSongButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(musicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(501, Short.MAX_VALUE))
        );

        panelCards.add(musicPanel, "musicCard");

        jSplitPane2.setRightComponent(panelCards);

        buttonsPanel.setBackground(new java.awt.Color(232, 175, 54));
        buttonsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        slotsPanelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/slotButtonImg.png"))); // NOI18N
        slotsPanelButton.setBorderPainted(false);
        slotsPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slotsPanelButtonActionPerformed(evt);
            }
        });

        payTablePanelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/payTableButtonImg.gif"))); // NOI18N
        payTablePanelButton.setBorderPainted(false);
        payTablePanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payTablePanelButtonActionPerformed(evt);
            }
        });

        musicPanelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/musicButtonImg.png"))); // NOI18N
        musicPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicPanelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(buttonsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(musicPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, buttonsPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(slotsPanelButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(payTablePanelButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(slotsPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(payTablePanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(musicPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(292, Short.MAX_VALUE))
        );

        jSplitPane2.setLeftComponent(buttonsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//<editor-fold defaultstate="collapsed" desc="Graphics setting code">   
    private void setSlotGraphics() {
        //Setting correct picture for each symbol
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[0][0].getName() + ".png")));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + slots[0].getName() + "spec.png")));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[0][2].getName() + ".png")));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[1][0].getName() + ".png")));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + slots[1].getName() + "spec.png")));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[1][2].getName() + ".png")));
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[2][0].getName() + ".png")));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + slots[2].getName() + "spec.png")));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/" + reels[2][2].getName() + ".png")));
    }

    private void setFailGraphics() {
        //Sets error graphic for each symbol & outputs failure message
        jLabel8.setText("You're BROKE!");
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/bankrupt.gif")));
    }
    
    private void setNudgeFailGraphics() {
        //Sets failure graphic for nudge buttons & outputs failure message
        jButton2.setBackground(new java.awt.Color(158,12,0));
        jButton3.setBackground(new java.awt.Color(158,12,0));
        jButton4.setBackground(new java.awt.Color(158,12,0));
        jLabel8.setText("You can't nudge again until you spin!");
    }
    
    private void setHoldFailGraphics(){
        //Set failure graphic for hold buttons & outputs failure message
        jButton10.setBackground(new java.awt.Color(158,12,0));
        jButton11.setBackground(new java.awt.Color(158,12,0));
        jButton13.setBackground(new java.awt.Color(158,12,0));
        jLabel8.setText("You can't hold another reel until you spin!");
    }

    private void resetNudgeGraphics(){
        //Resets nudge graphics after they've been set to nudge2 due to trying to nudge while cannotNudge is flagged
        jButton2.setBackground(new java.awt.Color(252,118,106));
        jButton3.setBackground(new java.awt.Color(252,118,106));
        jButton4.setBackground(new java.awt.Color(252,118,106));
    }
    
    private void resetHoldGraphics(){
        jButton10.setBackground(new java.awt.Color(252,118,106));
        jButton11.setBackground(new java.awt.Color(252,118,106));
        jButton13.setBackground(new java.awt.Color(252,118,106));
    }
    
    private void setErrGraphics(){
        //Sets error graphics for middle row of symbols & sets spin button graphic to spin2
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/ERR.png")));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/ERR.png")));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/ERR.png")));
        jButton1.setBackground(new java.awt.Color(141, 19, 21));
    }
    
    private void setWinGraphics(){
        //Sets jackpot graphics for middle row of symbols, sets spin button to spin2, sets nudge buttons to nudge2
        jButton1.setBackground(new java.awt.Color(163,16,7));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slotto/img/victory.gif")));
        slotsPanel.setBackground(new java.awt.Color(255,204,102));
        betPanel.setBackground(new java.awt.Color(255,204,102));
        playSound("jackpotsong");
        jLabel8.setText("YOU ARE A WINNER! NOW GET OUT!");
    }

//</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Sound effects code">
    public void initClips(){
        try{
            songClip=AudioSystem.getClip();
            soundClip=AudioSystem.getClip();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public void playSound(String fileName) {
            if(soundCurrentlyPlaying){
                soundClip.close();
                soundCurrentlyPlaying=false;
            }
        try {
            File soundFile = new File("src\\slotto\\sounds\\" + fileName + ".wav");
            soundStream = AudioSystem.getAudioInputStream(soundFile);
            soundClip.open(soundStream);
            soundClip.start();
            soundCurrentlyPlaying=true;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void playMusic(String fileName){
        if(songCurrentlyPlaying){
            songClip.close();
            songCurrentlyPlaying=false;
        }
        try{
            File songFile=new File("src\\slotto\\sounds\\music\\"+fileName+".wav");
            songStream = AudioSystem.getAudioInputStream(songFile);
            songClip=AudioSystem.getClip();
            songClip.open(songStream);
            songClip.start();
            songCurrentlyPlaying=true;
        }catch(Exception e){
            System.err.println(e.getMessage());
        }
    }
    
    public void checkFileList(){
        File songsFolder=new File("src\\slotto\\sounds\\music");
        FilenameFilter filter = (dir,name)-> name.endsWith(".wav");
        String[] songList=songsFolder.list(filter);
        for(int i=0;i<songList.length;i++){
            songList[i]=songList[i].substring(0,songList[i].indexOf("."));
        }
        songsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(songList));
    }
//</editor-fold>
//Procedure handling adding, storing & outputting winnings
    private void winningsCalc(int multiplier) {
        //Stores bank value pre-calculating in prevBank
        prevBank=bank;
        //Stores bet value pre-calculating in prevBet
        prevBet=bet;
        
        //Multiplies bet value by multiplier
        bet *= multiplier;
        recentWinnings=bet;
        //Adds winnings to bank, handles negative bet values with negative multiplier values
        bank += bet;
        //Stores results of calculatons in winnings value
        winnings += bet;
        //Outputs bank value and winnings
        jLabel6.setText("Â£" + bank);
        jLabel16.setText("Â£" + winnings);
    }

    private void checkSlots() {
        //Resets hold flags & hold button graphics
        for(int i=0;i<3;i++){holdFlags[i]=false;}
        resetHoldGraphics();
        //Resets nudge flag
        cannotNudge = false;
        //Reset skull^cherry flag
        justSkullOrCherry=false;
        //Reset nudge graphics
        resetNudgeGraphics();
        //Reset output box
        jLabel8.setText("");
        //Reset integer for presence of cherry and/or skull
        int checkInt = 0;
        //Triggered when all 3 slots are the same
        //<editor-fold defaultstate="collapsed" desc="ignoring this for now">
        if (slots[0].getID() == slots[1].getID() && slots[1].getID() == slots[2].getID()) {
            switch (slots[0].getID()) {
                case 0:
                    //If all slots are cherries, multiply wager by 10 & add as winnings
                    winningsCalc(10);
                    break;
                case 1:
                    //If all slots are bells, multiply wager by 10 & add as winnings
                    winningsCalc(10);
                    break;
                case 2:
                    //If all slots are BARs, multiply wager by 20 & add as winnings
                    winningsCalc(20);
                    break;
                case 3:
                    //If all slots are sevens, multiply wager by 30 & add as winnings
                    winningsCalc(30);
                    break;
                case 4:
                    //If all slots are lemons, multiply wager by 40 & add as winnings
                    winningsCalc(30);
                    break;
                case 5:
                    //If all slots are grapes , multiply wager by 60 & add as winnings
                    winningsCalc(60);
                    break;
                case 6:
                    //If all slots are oranges, multiply wager by 100 & add as winnings
                    winningsCalc(100);
                    break;
                case 7:
                    //If all slots are skulls, multiply wager by 10 & deduct
                    winningsCalc(-10);
                    break;
                case 8:
                    bank += 1000000;
                    winnings += 1000000;
                    jLabel6.setText("Â£" + bank);
                    jLabel16.setText("Â£" + winnings);
                    jackpotFlag=true;
                    canSpin = false;
                    cannotNudge = true;
                    jLabel8.setText("JACKPOT!");
                    setWinGraphics();
                    break;
                case 9:
                    //If all slots are Dragon Balls, multiply wager by 400 & add to winnings
                    winningsCalc(400);
                    break;
                //</editor-fold>
            }
        } else {
            //Booleans for checking if cherries & skulls are present respectively
            boolean a = false;
            boolean b = false;
            //For loop that checks for cherries & skulls
            for (int i = 0; i < 3; i++) {
                //If current slot is cherry, set following calculations for cherry
                if (slots[i].getID() == 0) {
                    a = true;
                    System.out.println("CHERRDETECT");
                    checkInt = 0;
                }
                //If current slot is skull, set following calculations for skull
                if (slots[i].getID() == 7) {
                    b = true;
                    System.out.println("SKULL DETECT");
                    checkInt = 7;
                }
            }
            //Sets skull^cherry flag as true if a!=b
            if (a ^ b)justSkullOrCherry = true;
            //Trace statements
            System.out.println(""+justSkullOrCherry);
            System.out.println(""+checkInt);
            //If only a skull or only a cherry is present, the following calculations can be performed
            if (justSkullOrCherry) {
                //If 2 of the slots match, distribute winnings depending on what 
                if (((slots[0].getID() == slots[1].getID() || slots[0].getID() == slots[2].getID()) && slots[0].getID() == checkInt) || ((slots[1].getID() == slots[2].getID()) && slots[1].getID() == checkInt)) {
                    switch (checkInt) {
                        case 0:
                            //If 2 slots are cherries, multiply wager by 5 and add to winnings
                            winningsCalc(5);
                            break;
                        case 7:
                            //If 2 slots are skulls, deduct wager*5 from bank
                            winningsCalc(-5);
                            break;
                    }
                } else {
                    switch (checkInt) {
                        //If 1 slot is a cherry, add wager*2 to bank
                        case 0:
                            winningsCalc(2);
                            break;
                        //If 1 slot is a skull, deduct wager*2 from bank
                        case 7:
                            winningsCalc(-2);
                            break;
                    }
                }
            } else {
                //If none of the symbols match and aren't skull/cherry, deduct wager from bank
                System.out.println("SUCCESSFUL BET LOSS");
                winningsCalc(-1);
                System.out.println(bank);
            }

        }
        //If bank becomes empty, output fail graphics
        if (bank <= 0) {
            setFailGraphics();
        }
        
    }

    //Procedure for placing bets
    private void placeBet() {
            //Trace message for whenever placeBet() is executed
            System.out.println("placeBet() went through");
            //Storing inputted bet in a variable separate from x for validations
            int x = (Integer) jSpinner1.getValue();
            //Bet is rejected if it exceeds what's in the bank
            if (x > bank) {
                jLabel8.setText("You can't bet more than you have!");
                //Bet is rejected if it's less than/equal to 0
            } else if (x <= 0) {
                jLabel8.setText("You can't bet nothing!");
            } else if(jackpotFlag){
                jLabel8.setText("YOU ALREADY WON WHY ARE YOU SPINNING AGAIN?");
            } else {
                //If bet is valid, x is stored into bet & canSpin is set to true
                //Trace statements are output
                bet = x;
                canSpin = true;
                System.out.println("Successful bet placement");
                System.out.println("CANSPIN = " + canSpin);
                System.out.println("BET = " + bet);
                System.out.println("X = " + x);
            }
        
    }
    
    //Procedure handling nudge 
    private void nudge(Fruit[] slotsToMove) {
        //If the nudge flag or the canSpin flags aren't in the right state, nudging isn't possible
        if(cannotNudge||!canSpin){
            setNudgeFailGraphics();
            jLabel8.setText("You can't nudge until you spin!");
        }else{
            //Bank & bet are rolled back to before winningsCalc() was performed, Â£10 subtracted from bank
            bank=Math.abs(recentWinnings-bank)-10;
            // to check for difference between the stored symbols and the outputted graphics
            System.out.println("[" + slotsToMove[0].getName() + ", " + slotsToMove[1].getName() + ", " + slotsToMove[2].getName() + "]");
            //Replacing bottom slot with middle slot
            slotsToMove[2].replace(slotsToMove[1]);
            //Replacing middle slot with top slot
            slotsToMove[1].replace(slotsToMove[0]);
            //Creating new top slot
            slotsToMove[0].spinner(reelnumbs);
            //This was done in lieu of directly manipulating the array as it didn't work
            //Setting graphics for the symbols again
            setSlotGraphics();
            //Recalculating the winnings based on the new set of slots
            checkSlots();
            //Sets nudge flag to true
            cannotNudge=true;
            //Output bank value
           jLabel6.setText("Â£" + bank);
            //Plays nudge button sound effect
            playSound("nudgebuttonpress");
        }
    }
    
    //Procedure handling re-initialising slots each spin
    private void spinSlots(){
        //For each symbol, reset the object's contents & regenerate ID and name
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(!holdFlags[i]){
                    reels[i][j]=new Fruit("",0);
                    reels[i][j].spinner(reelnumbs);
                }
            }
        }
    }
    
    //<editor-fold defaultstate="collapsed" desc="Procedures for bet and hold buttons">
    //Procedure handling placing bets
    private void betButtonAct(int val){
        int x;
        if((val+(Integer)jSpinner1.getValue())>bank)x=bank;
        else x=(Integer)jSpinner1.getValue()+val;
        jSpinner1.setValue(x);
        playSound("betbuttonpress");
    }
    
    //Procedure handling hold buttons
    private void holdButtonAct(int reel){
        bank-=10;
        jLabel6.setText("Â£" + bank);
        holdFlags[reel]=true;
        playSound("holdbuttonpress");
    }
    //</editor-fold>

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Perform placeBet(), validate bet & store it
        placeBet();
        //If spin flag is true, perform rest of method
        if(canSpin) {
            //Trace statement for if this action successfully goes through
            System.out.println("action triggered");
            //Performs spinSlots()
            spinSlots();
            //Stores middle slot in each column in their own array for comparing in checkSlots()
            slots[0] = reels[0][1];
            slots[1] = reels[1][1];
            slots[2] = reels[2][1];
            //Sets slot graphics
            setSlotGraphics();
            //Checks slots
            checkSlots();
            //<editor-fold defaultstate="collapsed" desc="rng code">
            /*
            if(bank<=100) {
                if (bank<=200) {
                    if (bank<=300) {
                        if (bank<=400) {
                            if (bank<=500) {
                                for(int i=0;i<6;i++) {
                                    reelnumbs.remove(i);
                                }
                            }else{
                                int b=0;
                                while(reelnumbs.contains(0)){
                                    reelnumbs.remove(0);
                                }
                            }
                        }else{
                            for(int i=1;i<7;i++) {
                                reelnumbs.remove(i);
                            }
                        }
                    }else{
                        reelnumbs.remove(6);
                    }
                }
            }
            */
            //</editor-fold>
            // TODO add your handling code here:
        } else {
            setErrGraphics();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

//<editor-fold defaultstate="collapsed" desc="Code for nudge buttons">
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        nudge(reels[0]);
    }//GEN-LAST:event_jButton2ActionPerformed
	
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        nudge(reels[1]);
    }//GEN-LAST:event_jButton3ActionPerformed
	
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        nudge(reels[2]);
    }//GEN-LAST:event_jButton4ActionPerformed
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Code for bet buttons">
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
	    
	}//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        betButtonAct(100);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        betButtonAct(50);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        betButtonAct(1000);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        playSound("betbuttonpress");
        jSpinner1.setValue(0);
    }//GEN-LAST:event_jButton9ActionPerformed
	
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        betButtonAct(10);
    }//GEN-LAST:event_jButton12ActionPerformed
//</editor-fold>
 
 //<editor-fold defaultstate="collapsed" desc="Code for hold buttons">
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if(holdFlags[0]||!canSpin)setHoldFailGraphics();
        else holdButtonAct(0);
    }//GEN-LAST:event_jButton10ActionPerformed
	
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        if(holdFlags[1]||!canSpin)setHoldFailGraphics();
        else holdButtonAct(1);
    }//GEN-LAST:event_jButton11ActionPerformed
	
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if(holdFlags[2]||!canSpin)setHoldFailGraphics();
        else holdButtonAct(2);
    }//GEN-LAST:event_jButton13ActionPerformed
	
//</editor-fold>

//Button for auto-triggering jackpots, must omit once complete
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        reelnumbs.clear();
        reelnumbs.add(8);
    }//GEN-LAST:event_jButton14ActionPerformed

//<editor-fold defaultstate="collapsed" desc="Code for side panel buttons">
    private void slotsPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slotsPanelButtonActionPerformed
       cardLayout.show(panelCards,"slotsCard");
    }//GEN-LAST:event_slotsPanelButtonActionPerformed

    private void payTablePanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payTablePanelButtonActionPerformed
        cardLayout.show(panelCards,"payTableCard");
    }//GEN-LAST:event_payTablePanelButtonActionPerformed

    private void musicPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicPanelButtonActionPerformed
        cardLayout.show(panelCards,"musicCard");
    }//GEN-LAST:event_musicPanelButtonActionPerformed
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Code for music buttons">
    private void songsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songsComboBoxActionPerformed
        System.out.println("PUNCHED IN:"+songsComboBox.getSelectedItem());
    }//GEN-LAST:event_songsComboBoxActionPerformed

    private void scanFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanFolderButtonActionPerformed
        checkFileList();
    }//GEN-LAST:event_scanFolderButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
       songClip.stop();
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        songClip.start();
    }//GEN-LAST:event_playButtonActionPerformed

    private void enterSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterSongButtonActionPerformed
        playMusic(""+songsComboBox.getSelectedItem());
    }//GEN-LAST:event_enterSongButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        songClip.stop();
        songClip.setFramePosition(0);
    }//GEN-LAST:event_stopButtonActionPerformed
//</editor-fold>
    //HI
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(slotMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(slotMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(slotMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(slotMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //Arraylist initialisation
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 10; j++) {
                if (i == 0 || i == 7) {
                    if (j % 2 == 0) {
                        reelnumbs.add(i);
                    }
                } else {
                    reelnumbs.add(i);
                }
            }
        }
        reelnumbs.add(8);
        reelnumbs.add(9);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new slotMachine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel betPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton enterSongButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel musicPanel;
    private javax.swing.JButton musicPanelButton;
    private javax.swing.JPanel panelCards;
    private javax.swing.JButton pauseButton;
    private javax.swing.JPanel payTablePanel;
    private javax.swing.JButton payTablePanelButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton scanFolderButton;
    private javax.swing.JPanel slotImgPanel;
    private javax.swing.JPanel slotsPanel;
    private javax.swing.JButton slotsPanelButton;
    private javax.swing.JComboBox<String> songsComboBox;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
